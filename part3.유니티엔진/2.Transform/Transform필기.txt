[ 플레이어 설정 ]
유니티 Asset Store의 free asset인 Unity Chan을 사용한다.
Material 이 어디서 사용되는지 보고싶으면 Find References in Scene
UnityChan이 추가된거보면 아이콘이 다름 = 사실 유니티짱은 여러 메쉬들의 집합이기때문(메쉬 폴더라고할까)

wasd를 누르면 위치변화를 주고싶다=Transform을 변경시키면되겠다. 
=>하도 많이 쓰는 기능이기에 함수가 이미 준비되어있음
transform.position += new Vector3(0.0f, 0.0f, 0.0f);
transform.position += Vector3.forward; 사실 이렇게 제공되는 함수가 있다.

[ Positon ]
Update문은 한 프레임당 호출됨. 즉, 너무빨리 반복됨(1/60초마다 코드가 돌아가니까)
예전 알고리즘 미로만들기때 했던것처럼, 이전틱(프레임)과 지금틱의 차이를 이용해야한다. = Time.detaTime; 이라고 또 제공함
위치 = 시간 * 속도 인것을 이용하여 wasd이동의 정도를 제어하자.

스크립트 내의 상수는 public을 붙여주면 유니티 Inspector에서 수정할 수 있다! (_speed)
이처럼 상수 뿐 아니라 public GameObject _obj를 써서, Inspector에서 다른 GameObject를 드래그앤드랍으로 스크립트에 연결시켜줄수있다. 굉장한것
근데 속도같은 속성은 외부에 노출하고싶지않은경우가 많다. = Private쓰고싶어짐. 근데이러면 Unity에서 수정못함.
이때 쓰는 방법이 [SerializeField] 이다. (public처럼 unity에서 수정가능하지만 private속성)

Transform중 Rotation에서 주의해야할점. y=90으로 두고 이동시키면 forward이지만 캐릭터의 앞이 아닌 옆으로간다.
= 당연하게도 모델은 90도 회전했지만 forward자체는 월드좌표의 앞방향으로 이동했기때문.
그렇다면 '캐릭터의 앞'으로 가는 코드는 어떻게 짜야할까? =로컬좌표를 사용해야한다.
(월드좌표 = 유니티 세계속 좌표 / 로컬좌표 = 메쉬기준의 좌표)


[ Vector3 ]
게임에서 자주 사용하는 벡터
1. 위치 벡터
2. 방향 벡터

방향 벡터를 구하는 공식 = 상대방의 위치 - 나의 위치 = 목적지 - 시작점 (두 위치의 차가 곧 방향이 된다.)
또한 방향 벡터는 (1)방향 뿐 아니라 (2)거리(크기)도 담고있다.
1) 방향 = noramalized / 2)거리(크기) = magnitude

[ Rotation ]
transform.Rotation은 vector3 타입이 아니다.(Quarternion = xyz뿐 아니라 w도 포함)
eulerAngle을 쓰면 벡터로 쉽게 변환시킬수있다. (오일러 각도 = 360도 표기)

원하는 특정 방향을 보게하고싶다면? 바라보길 원하는 지점과 지금 내가 보는 방향의 각도차를 이용하여 구해주면된다.
근데 딱봐도 자주 사용하게 생겼다 = 유니티에서 제공하는 기능임. Rotation관련 내용이니 transform.Rotation에서 찾아보자.
(quaternion을 쓰는 이유? = gimbalLock현상을 막기위함 -> 내용복잡하니 그냥 그렇구나 정도만 알아두자)
Quaternion.LookRotation( )을 이용하면됨. 그러나 이러면 한순간에 방향이 바뀌기에 굉장히 어색함
=> Slerp와 Lerp를 사용해서 부드럽게 회전시키자.
(slerp = )
사실 LookRotation은 slerp로 도착할 방향벡터를 얻기위한 수단이라고 보는게 좋을것같다.
Quaternion.Slerp( 시작점, 목적지,정도 ) 

[ Input Manager ]
Update문 안에다 모든 코드를 넣으면 프레임마다 부하가 엄청 걸릴것임.
-> update에는 키 입력만을 확인하고, 다른 매니저에 코딩을 하여 입력에 따른 이벤트를 건내주는 식으로 하는게 성능상 더 수월하다.
(일종의 delegate)

void Start()에서 구독을 할때, 구독해지(-=)를하고 신청(+=)을 해주는게 좋다. 혹시라도 2번구독이 된다면 신호가2번씩와서 작동이 2번씩 되기때문

만약, Update에다 키보드 입력을 체크하는 코드를 담았고 양이 많아진다면, 어디서 입력을 받았는지 찾기 어려워질수있다.
그러나 event방식으로 처리하면 브레이크포인트를 잡아서, 누가 이벤트를 받고 누가 실행되는지 쉽게 찾을수있다.
(브레이크포인트 잡고 - Unity에 연결 - Play)


