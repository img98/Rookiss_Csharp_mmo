[ UI 기초 ]
사실 ui도 빈 오브젝트에 컴포넌트 추가할수 있지만, 어려우니, 유니티에서 제공하는 큐브같은 UI-Button을 사용할것임.
//버전이 달라서 Button text mesh Pro를 사용했고 이게 비슷한거같다.(legacy는 호환용으로만 있는 애라 쓰면안됨)
추가하게되면 Canvas에 Button이 생기고, EventSystem이라는 메쉬가 생긴다. 이 이벤트시스템이, 우리가 매니저를 만들어서 기능들을 사용하는것마냥, Ui들을 다루는 매니저라고 보면된다.

Canvas = 말그대로 도화지, UI를 볼수있게해주는 공간임(그냥 아무데나 ui파일들을 넣으면 안보임.)
그리고 버튼들은 Panel을 만들어 거기다 담아서 관리하는게 좋다. Canvas-Panel-Button

주의해야할점은, 지금까지 모든 물체들은 transform을 이용해서 위치를 파악했는데, UI는 Rect Transform라는 다른 컴포넌트를 사용한다.
이 rect transform을 분석해보자.
UI를 분석할때는 화면을 2d로 만들어서 보는게 좋다.

Pivot = ui의 중심점. 회전을 시키면 좀 더 직관적으로 확인할수 있을거다.
(근데 나는 pivot이 옮겨지지가 않더라. 버전이 달라서 고정시켜놨나. => scene의 좌측하단에 Center와Pivot으로 되있는 란이 있는데 그거 바꾸니까 pivot이동함. Center는 pivot 고정인듯?) 

[ Rect Transform ]
패널 중앙에 있는 x자 마크는 '앵커'라고하는데 ui의 핵심이 된다.
UI는 원근법을 적용받지 않음(3d좌표로 만들어서 버튼 하나를 뒤로 논다고해도, 작아보이지 않음.)  그렇다면, 화면 비율이 변하면 ui는 어떻게 되야할까?
ui도 비율에 맞춰 크고작게하면 될거라 생각할수있지만, 만약 이미지 파일이라면 찌그러지거나 깨져보일수있다.
=>UI의 비율과 여백의 비율을 맞춰준다.

앵커를 쓰기 위해서는 일단 rect transform을 가진 부모가 있어야함. (버튼의 부모가 패널. 그래서 버튼의 앵커가 패널에 달려있는거) 
즉, 버튼이 어디 위치할지 패널 기준으로 정의해주는게 앵커다.  

앵커 맞추는 공식! : 앵커의 각 모서리핀셋은 버튼의 각 모서리에 대응하며,
=>핀셋과 부모의 구석 사이는 비율로 연산하고, 핀셋과 본인 모서리 사이는 고정 거리로 연산한다!!
(그래서 패널을 크고작게만들면 버튼도 아예 모양이 변해버림.) 
이 공식을 사용하면 화면이 변하는 비율에 맞춰서, 버튼도 비율이 맞춰짐. = 즉, 화면에서는 내가 의도했던 이미지 비율대로 나온다는듯?(정확힌 모르겠다.)
//잘모르겠으면, 자기랑 똑같은 사이즈로 앵커를 맞추라네.고정거리0으로.

[ Button Event ]
캔버스에서 중요한것 : Render mode=카메라가 찍는방법?, Sort order=캔버스간의 깊이 순서(누가 먼저인지)
(지금, screen savers overlay의 경우, 제3의 공간에 있는 카메라가 찍고있는것.(보면 카메라 범위에 캔버스없는데도 게임화면엔 나오거든))

이어서, 클릭커 게임처럼, 버튼을 누르면 Event를 발생시켜서 코드를 작동시키는걸 해보자.
 일단 패널은 지우고, 새롭게 Text ui를 만들어보자.
// !!단, 텍스트TMP를 사용하기에, 한글이 깨져서 출력됨. = window-Font Asset Creator를 통해 폰트파일을 수정해주어야한다.자세한건 검색.
 
버튼을 누르면 event를 발생시켜 콜백 방식을 쓰고싶다. 버튼의 On Click()을 이용한다.
(여기에는 놀랍게도 스크립트가 아닌, 프리팹을 드래그드랍으로 넣어줬다.)(이미 UI_button이라는 ui에다 스크립트를 넣어줘서 괜찮은건가?)
(그러네, selectObject에다가 프리팹을 넣고, 그 프리팹 내, 스크립트의 함수와 연결해줄수있었다. )
//여기다 프리팹말고 스크립트 넣었다가 진자 크게 곤욕치렀다...

여기서 버튼을 눌렀는데 해당 위치좌표로 캐릭터가 움직이는게 거슬린다. =inputManager에서 그냥 클릭자체에다 invoke를 주게했기때문. EventSystem이라는 라이브러리를 통해, UI를 클릭했을때는 신호 안가게 조건을 달아주자.
if (EventSystem.current.IsPointerOverGameObject()) {return;} //ui를 눌렀다면 그냥 return하겠다.

이제 버튼 눌렀을때 이벤트 발생하는걸 확인했으니, 텍스트를 바꾸는 이벤트로 연결해보자.
우선 텍스트 ui와 버튼 ui를 연결해야하는데, 이부분이 항상 고민임. //다른객체를 찾아 연결하는건 항상 고민해야함.
가장 쉬운방법은 툴로 연결하는것. [SeriallizeField]로 변수만들고 툴에서 연결시켜주자.

!!!! 참고로 나는 TMP 텍스트를써서, 클래스가 TextMeshProUGUI _text; 이다.!!!!


[ UI자동화 #1 ]
이번시간에는 ui이름만으로 이벤트와 연결시키는, 툴이 아닌, 코드를 만들어보자.

enum으로 버튼, 텍스트들의 이름을 준비해놓고, Bind()함수를 만들어, 인자로 입력한 이름이 준비된것 중에 있다면, 자동으로 연결시켜주게할것이다.
=>그러면 준비한 enum을 어떻게 확인하느냐? reflection문법을 사용하면된다.

Bind함수를 만들기에 앞서, 자기자식들을 확인하는 함수는 여러곳에서 사용되기에, 아예 util 스크립트를 새로 만들어 유용한 기술들을 담아보자.

결국, UI_Button에 해당 컴포넌트를 갖고있는 자식들을 갖고오는 Bind()함수를 만들었다.

[ UI 자동화 #2 ]
Bind로 갖고왔으니, get을 통해 꺼내 쓰는방법을 만들어보자.
Get() 함수는, 그저 앞에서 Bind로 담아놓은 배열을 꺼내기만함ㄴ 되서 크게 어렵지않다.

위과정에서 component를 보고 맵핑하는것뿐 아니라, GameObject 입력으로도 맵핑할수 있도록, Bind<GameObject>(typeof(GameObjects))를 만들었다.

그리고 Get도 나중에는 text뿐만 아니라, image나 여러 다른 타입을 불러오는 경우도 있을거다.
그때마다 Get<image> 이런식으로 만들기 귀찮으니 여러 버전의 Get을 만들어보자.
GetText, GetButton, GetImage 생성함.

그리고 이런 UI기반 기능들은, 다른곳에서도 자주사용할 것이니 UI_Base라는 UI의 기반되는 스크립트를 만들었다.
앞으로 UI스크립트들은 UI_Base를 상속받아 만들면 될것임.

[ UI 자동화 #3 ]
앞서 바인딩까지 했었다. 이제 event와 바인딩후 event와 연동을 해보자.

UI처리는 인풋매니저의 invoke형식이 아닌 EventSystem을 사용할 것이다.
UI_EventHandler를 만들어 ui를 클릭하거나 드래그 하는 등의 이벤트를 감지해서 콜백 형식을 사용할 수 있게만들자.

Event시스템이 던져주는 event를 받으려면 특정 함수들이 필요하다. ex) IBeginDragHandler, IDragHandler
얘네 interface를 써야하니, MonoBehaviour 옆에 추가하고 인터페이스 구현을 해주자.
애초에 요구하는 Interface자체가 드래그 시작되는 순간과 지속되는 동안을 너무나도 잘 캐치하기에, 콜백식으로 만들기 쉬웠다.

후에 UI_Button에 ItemIcon을 자동으로 바인딩해서, ItemIcon에 달린 UI_EventHandler에 있는 OnDrageHandler에서 invoke받을때, 아이콘transform의 position을 드래그한 position으로 옮기는 작업가지 해봤다.
evt.OnDragHandler += ((PointerEventData data) => { evt.gameObject.transform.position = data.position; });
위 코드를 사용했는데, 완전 처음보는 문법인데 설명도 없더라. 나중에 쓰라고하면 이해가 안될것같다. 대충, 드래그핸들러에 기능을 추가하는 코드같긴한데.
//아 이게 람다문법이네. (입력하면 => 반환하겠다.)
해석하면 PointEventData data를 입력으로 넣으면 evt.gameObject.transform.position = data.position;을 반환할거라는 뜻

[ UI 자동화 #4 ]
앞서다룬 event를 하나하나 추가하는 기능을 깔끔하게해보자. Ondraghandler += 그거
UI_Base 아래에 AddUIEvent 함수를 새로만들었다.
그리고 함수를 추가하면서 만약 UI_EventHandler가 오브젝트에 안달려있다면 달아주는 코드를 추가했는데, 이런 형태의 로직은 자주 사용하기에
Util에다가 GetOrAddComponent<>()함수를 만들었다.

//와머지 evt.OnDragHandler += ((PointerEventData data) => { evt.gameObject.transform.position = data.position; }); 이 내용을 그냥 += action으로 퉁치는데?
실사용 : AddUIEvent(go, (PointerEventData data) => { go.transform.position = data.position; }, Define.UIEvent.Drag);
이처럼 기능에 람다를 넣어준것이다. 참고로 evt.gameObject는 수정전에 직접 연결하기위해 하드코딩한거라서, 수정후에는 go로도 충분하다.

그런데 UI_Button에서 한것처럼, 바인딩을 통해 go를 찾고 이걸 AddUI로 돌리는, 과정을 두번 돌리지말고 한번으로 돌리는 방법은 없을까?
=> Extension Method를 이용하면된다. 그러나 자주쓰진 않기에 간단히 넘기겠다.
인자 중 대상을 의미하는 GameObject go에 this를 붙이고, 내용에 UI_Base.AddUIEvent(go, action, type); 으로 UI_Base의 Add기능을 사용하겠다고 명시해주면된다.

드래그의 경우 이전 로직이 좀더 좋아보여서 그냥 냅두고, 버튼을 클릭하는 기능은 Extension메소드로 만들어보자.
GetButton((int)Buttons.PointButton).gameObject.AddUIEvent(OnButtonClicked);
이렇게 바인딩하기.gameObject.함수(기능) 으로 한줄로 요약이 가능했다.

[ UI 매니저 #1 ]
UI매니저를 만드는 가장큰 이유는 팝업 관리를 위해서다.
그런데 체력바, 경험치창 같이 고정적으로 붙어있는 ui도 있기에
팝업용 UI와 그렇지않은 UI 두개로 나누어 관리해야한다.

모든 ui에 Popup과 Scene두개의 폴더로 구분했으며, 앞으로는 상황에 따라 각각 UI_Popup, UI_Scene을 상속받아서 만들게 할것이다.
(얘네도 근본적으론 UI이니까, monobehaviour가 아니라 UI_Base를 상속받게 만들었다.)

그리고 이제 본격적으로 Manager폴더에 UIManager를 만들자.
다시한번 강조하지만 UI매니저는 팝업의 순서, 즉 SortOrder를 관리하기 위해서 만들고있는것이다.
팝업을 키고 끌때마다 SortOrder가 변화하는 것을 저장하는것을 연동시켜주면되겠다

UIManager에서 매니저를 통해 ui를 띄우고 지우는 기능을 만들었는데 여기서 좀 특이한것이 sort order의 처리였다.
UI를 지우는 경우 그저 _order--로 감소시키는 것이 가능했지만, UI를 만드는 경우는 Managers를 통해 만드는것 외에도,
기본적으로 떠있는 ui같이 특이한 경우가 있기에 그저 _order++로 처리해서는 안됬다.
=>UI_Popup에 _order++과 관련된 코드를 추가해주자(이번시간에는 안했고 훗날한다고한다.)

[ UI 매니저 #2 ]
외부에서 캔버스를 열어달라고하면 생성하는 SetCanvas 함수를 만들어보자. 
외부에서 ui를 팝업시킬때 순서에 맞춰order를 넣어달라는 의미. UI가 생성될때 필요한 코드이므로, UI_Popup과 UI_Scene에 필요하겠다.
참고로 캔버스는 각 UI마다 달려있는 것이니, 여러개의 캔버스가 존재한다는 것을 잊지말고, 이 order가 그러한 Canvas들 사이의 깊이 관계를 의미하는 것이다.

얘네를 추가할때 void Start()에 추가하지말고 public virtual void Init()이라는 가상의 함수를 만들어 거기다 추가하는게 좋다.

만약 ShowPopupUI를 엄청 여러번 하면 어떻게될까? Hierarchy가 보기 지저분해질것이다.
얘네도 폴더에 담는식으로 처리하면 좋을것같은데..=> Create Empty를 만들어, 하위에다 넣어서, 폴더처럼 사용한다.
예전에 @Manageers만들었을때를 응용하여 @UI_Root라는 빈 오브젝트 안에다가 UI들이 생성되도록 ShowPopupUI를 수정해보자.
SetParent를 통해 생성된 GameObject의 부모(상위) 파일을 정해줄수있다.

이렇게 sortOrder도 신경써서 만들어주면 UI가 위아래로 잘 배열된걸 볼 수 있다.
그렇지만 여기서 한가지 흠이라고 할 수 있는 것이, 더 아래있어야 되는 ui를 드래그 할 수 있다는 것인데,
이게 드래그한다고 위로 올라오는건 아닌데, 아래있는놈이 상호작용이 된다는게 맘에 안든다. = 위 UI에서 아래쪽은 건드리지 못하게하는 가림막을 만들어주면된다.
그냥 아무 패널이나 이미지 ui만들어서 투명하게 만들고 걔를 캔버스 전부를 덮게하면된다.
그리고 RaycastTarget을 켜놓아야한다. = 그러면 투명 이미지UI를 만지는것으로 취급되어 아래 캔버스의 UI와는 상호작용하지 않게된다.
(참고로 한 캔버스 내에서도 order가 있기때문에 블락커를 폴더의 맨 위에 놔야됨 <= 폴더내에서는 오히려 아래에 있을수록 order가 위쪽에 있는것임을 명심하자.)

[ 인벤토리 실습 #1 ]
UI중 우리가 text, button만 썻지만 이거말고도 유용한게많다.
그래서 그냥 하나 만들어보고, 컴포넌트에서 껏다켰다 해보면서 쓰임새를 알아내서, 코드에서 응용할수있다.(대부분 이름이 코드랑 컴포넌트에 쓰인거랑 비슷해서)

이제 여러 UI들을 활용하며 인벤토리 창을 만들면서 특이한점 정도만 기록해보겠다.
1.패널의 ImageType중 simple과 sliced의 차이.
Simple은 단순히 이미지를 그냥갖다쓰는거라서, 이미지를 늘이거나 줄이면 비율이 이상해져서 뭉개져보일수있다.
그러나 Sliced의 경우는 소스이미지를 SpriteEditor를 통해서 모서리를 잘라내서, 비율이 변하더라도 모서리 부분의 퀄리티는 살릴수있다는 장점이 있다.

2.아이콘액자에 이미지ui를 넣을때, 부모 산하 관계이기에, rect transform의 프리셋을 사용하면 사이즈 맞추기 쉬웠다.(Alt, Shift를 누르면서 프리셋을 누르면 이동편리)

3. UI_Inven_Item이라는 아이템 액자에 이미지 넣은 ui는 프리팹으로 저장해 사용하겠다. 그런데 주의할것은 얘를 Scene에다가 넣었다는것.(인벤토리창에 종속된 관계니까 scene이 맞으려나?)

4. 이제 UI_Inven의 패널에는 많은 UI_Inven_Item이 들어가게 될 것이다. 걔네들을 하나하나 좌표따주거나 할필요없이, 정렬을 해주는 컴포넌트가 있다.
=> layout 컴포넌트를 사용하자. 

5. UI 프리팹을 만들었으면, 만든후에 바로 프리팹 모드로 가서, 비율을 바꿨을때 화질이 얼마나 찌그러지는지 등을 보면서 다듬어주어야한다.

[ 인벤토리 실습 #2 ]
이제 UI인벤도 생겼고, 인벤 아이템도 생겼으니, 애네들을 바인딩해서 관리할 수 있는 코드를 작성해보자.
UI_Inven과 UI_Inven_Item모두 각각의 기능을 작동시키는 스크립트를 따로 만들어줘야한다.
UI_Inven : base.Init으로인해 캔버스가 불러와지면, 거기에 gridPanel을 바인드해주고, 프리팹에 예시용으로 들고있던 자식들(아이템)을 초기화시키고 새로 아이템을 자식으로 달아주는 스크립트
	또한 아이템을 자식으로 연결할때 여기에서 AddComponent로 UI_Inven_Item스크립트, 즉 기능을 달아주거나 이를 이용하여 새로운 기능을 사용할 수도 있다.
(그런데 여기서 의문점이 다시든게, Bind는 미리 만들어진 프리팹 형태로만 사용할 수 있는건가봐?)
UI_Inven_Item : 아이콘과 이름텍스트를 바인딩해서 이름을 설정해주거나 아이콘을 누를때 로그가 나오는등, Inven_Item에게 기능을 부여

[ 코드 정리 ]
1. AddUIEvent를 BindEvent로 이름변경해줬다.
2.사실 UI_Inven_Item은 Scene이라기보다는 UI_Inven에 기생하는 존재다. 그래서 이런 기생개념은 UI폴더에 SubItem으로 새로 만들어 여기다 보관하겠다.
3.생각보다 많아서 여기 다 쓰기 좀 그렇다.