[ Camera #1 ]
메인카메라에 동작(캐릭터 따라다니기)을 부여하자.

유니티짱을 쿼터뷰로 찍어보자
카메라를 유니티짱 산하에 두면 카메라가 따라간다. 그러나 rotation까지 로컬로 고정되기에 화면을 돌리면 어지러움
위 문제를 해결하기 위해 우리는 CameraController를 만들거다.
(용어 정의를 담기위해 Define 스크립트를 만들었다.)

if (_mode == Define.CameraMode.QuarterView)
{
transform.position = _player.transform.position + _delta; // 플레이어의 위치에 델타위치를 더해준게 = 카메라의 위치
transform.LookAt(_player.transform);//카메라가 상대의 좌표를 주시하도록 강제
//LookAt( ) : 상대 transform을 지켜보도록 설정
}

새로만든 CameraController의 Update문에 카메라의 위치를 이동시키는 코드를 넣는다하면, 플레이 시 카메라가 덜덜 떨리는 현상이 생김.
= InputManager에서 받은 인풋후에 올 코드가 cameraController일지 PlayerController일지 미정이기 때문임. 어떨때는 이거먼저 저거먼저라서 살짝 괴리가 생겨서 그렇다.
=> Update( )를 LateUpdate( )로 바꿔주어 update문끼리의 순서를 만들어준다.

[ Camera #2 ]
로아마냥 클릭한 위치로 움직이게 해보자. (레이캐스팅과 이동, 그리고 카메라의 조합)
마우스를 이용한 인풋도 필요하기에 InputManager수정

{PlayerController에 마우스입력을 받고 플레이어 position움직이기 & InputManager에 마우스입력 받기 & Define에 MouseAction}을 추가했다

[ Camera #3 ]
캐릭터가 움직이기 시작할때 방향전환을 좀더 부드럽게 해주기위해 Quaternion.Slerp사용

카메라가 벽에 막혀 안보일때, 카메라가 앞으로가는걸 구현해보자. 와우스타일로
1. 플레이어가 카메라 위치로 자기 좌표를 쏴보낸다.
2. 그 도중에 collision이 발생한다면, 그 발생위치로 카메라를 보내면된다. =>카메라컨트롤러에 이내용을 만들어보자.

