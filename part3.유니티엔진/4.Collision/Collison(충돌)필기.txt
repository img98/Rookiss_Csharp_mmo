[ Collider ]
Collider = 물리 충돌 처리를 위한 컴포넌트
핵심 : collider와collider가 만나 멈추게 된다!
(유니티에 중력 등 물리엔진을 적용시키기 위해선 Rigidbody 컴포넌트를 붙여주자)

캡슐콜라이더 = 물리판정을 받는 껍데기를 씌움 (FPS의 경우 팔다리몸 등 여러개 콜라이더를 씌워 히트판정을 정확히 만듬)

[ Collision ]
앞서 유니티짱에 쒸운 캡슐콜라이더와 벽의 콜라이더가 부딪히니 유니티짱이 넘어졌다.
= 물리적인 힘이 캡슐콜라이더에 영향을 주었기때문
이러한 물리적 영향을 주지 않게 할 수 없을까? = isKinematic // 물리가 rigidbody에 영향을 줄지말지 (대신 중력도 사라짐)
//사실 안넘어지게 하려면 free rotation쓰면됨

그런데 물리영향 받게하려고 rigidbody를 붙이는데, 그걸 또 안받게하겠다는 isKinematic이 있다는게 무슨 쓸데없는 짓인가 싶었다.
= 사실 rigidbody는 물리엔진 뿐만 아니라, 충돌 판정을 이용하기 위해도 사용함.
//나중에 생각난건데, isKinematic은 충돌은 해야되지만 물리영향으로 움직이면 안되는, 이를테면 벽이나 발판같은 환경요소를 구현하기 좋을것같네.

유니티에서는 충돌 했을때 발생하는 이벤트를 로그에 띄워보자.
<OnCollisonEnter>
1) 나한테 rigidbody 있어야 한다. (isKinematic : Off)
2) 나한테 Collider가 있어야 한다. (isTrigger : Off)
3) 상대한테 Collider가 있어야 한다. (isTrigger : Off) // 유니티 document를 가면 더 상세한 상황설명을 볼수있다.
// 조건이 복잡해서 자주 실수가 발생한다.

<OnTriggerEnter>
collider에 보면 isTrigger라는 옵션이 있는데, 이걸키면 isKinematic이 켜져있어도 Trigger이벤트가 발생한다.
내용이 조금 길어서 다음 시간에 이어서.

[ Trigger ]
OnCollisionEnter의 인자형식인 collision을 f12로 상세히 살펴보면, 나랑 맞닿은 녀석이 누군지 저장하는 메소드도있다.
collision.gameObject.name
OnCollisionEnter는 어디에 쓸까? => fps처럼 총알에 맞으면, 충돌된곳 위치(이름)을 봐서 부위별 데미지를 다르게 줄 수 있다.(ex. 몸샷20, 헤드샷100)

위와달리 범위안에만 들어갔는지 여부를 확인할때 Trigger를 사용한다.(물리와 상관없이 맞았냐 안맞았냐만 확인)
1) 둘다 Collider가 있어야한다.
2) 둘중 하나는 isTrigger: On 이어야한다.
3) 둘중 하나는 rigidbody가 있어야한다.
(사용처 : 칼에 collider를 씌워 적에게 맞았는지 판단, 투명블록에 collider를 씌워 와우포탈마냥 이동같은 기능이 발생하게함 = 즉, 닿았는지 여부만 알면되는것)

!! 즉, Collision은 충돌과 동시에 그에 따른 물리법칙까지 계산해야함(ex.마찰) 그러나 이러한 계산은 많은 리소스가 필요함
그렇기에 rpg같이 물리 계산이 따로 필요없는 경우, 그저 닿았다는 사실만이 필요할 경우 Trigger를 사용한다 !!

[ Raycasting #1 ]
collider로 충돌범위를 설정하는 이유는 단순히 충돌때문만이 아니다.
가장 중요한 용도는 Raycasting을 위해서다.
Raycasting = 3d세상의 오브젝트를 2d(모니터) 좌표로 찍어도 상호작용가능(ex.와우 몹 클릭하면 선택되는거)
(Raycasting = 레이저를 쏴서 닿는 물체가 있는지 판별)

Physics.Raycast( 시작점, 방향, 길이) //사실 버전이 엄청 많아서 인자도 그때마다 다르다.

Raycast의 경우 레이저를 쏘는것이니, 레이저가 닿는 가장 첫번째 물체만을 return한다.
RaycastAll을 사용하면 관통레이저가 나가서, 범위안에 레이저가 닿는 모든 애들을 찾을수있다.(그 값들은 배열로 담아야되더라)

만약 내 카메라와 캐릭터 사이에 벽이 있어서 raycast가 불가능한 상황이 생긴다면 어떻게 해결해야될까?
카메라를 좀더 캐릭터에 가깝게 땡겨서, 벽을 카메라에 안보이게 한다.(와우에서 시점 가까워지는 그거 맞음)

[ 투영의 개념 ]
앞서말했듯 화면좌표와 3d공간의 좌표를 연결시키는 방법에 대해 연구해보자.
좌표 : Local <-> World <-> Viewport <-> Screen(화면)
Viewport? 스크린좌표를 비율(0~1)로 표현 //화면의 x좌표 0.2지점...이런식

3d와2d 화면을 연결시키려면 투영에 대해 알아야됨.
카메라 앞에 달려있는 가두리 속 물체들이 카메라앞, 가두리의 윗면에 투영되어 보이는 것이 우리의 화면이다.
3d화면이 카메라에 찍히면 깊이값(z)는 사라지게 됨. 그래서  x,y두 축값만 살게된다.

이런 투영에선 비율이 중요하다고 한다.

[ Raycasting #2 ]
Camera.main.ScreenToWorldPoint(마우스x, 마우스y, 카메라가두리 윗면까지의 거리 ) 라는 코드를 통해 2d좌표에서 3d좌표로 넘어갈수있다.
카메라가두리 윗면까지의 거리 = Camera.main.nearClipPlane
// 실전에선 Ray쓰자.

[ LayerMask ]
LayerMask = 내가 원하는 애들에 레이캐스팅

사실 레이캐스팅은 무거운 연산이 필요하기에 신중히 사용해야함.
실전에서는 만약 공격스킬을 구현한다치면, 캐릭터 콜라이더에만 레이캐스팅을 적용시키고, 이동은 벽이나 땅에만 레이캐스팅 쓰는식으로 사용을 줄인다.
이렇게 내가 원하는 애들만 골라서 레이캐스팅 하는 방법이 LayerMask다.
(메쉬의 inspector의 layer로 가면 원하는 layer를 설정하거나 추가할 수 있다.)

레이어마스크는 비트플래그를 이용한다. (계산기 배울때 했던 이진수 그거=DWORD)
Layer8번을 사용하고 싶다면 8번째 비트를 켜주면 되고, Layer9라면 9번째비트, 둘다하고싶으면 둘다키고, 8만빼고하고싶다면 8을키고 not으로 반전시킬수도 있다.
//간단한 개념임. 레이어 번호에 맞는 비트를 켜주면됨.(on=1)
int mask = (1<<8); //이렇게 비트연산자를 사용해야됨
그리고 raycast(ray, out hit, mask) 로 mask를 쓰겠다고 명시해주면된다.

근데 위 방법이 어렵다면?
LayerMask mask = LayerMask.GetMask("레이어이름"); 으로도 된다... //당연히 이걸쓰는게 맞지않나?

*살짝 부록이긴한데, Layer옆에 Tag는 말그대로 상표태그 같은거임.
이 태그를 이용해 쉽게호출하거나 여러 기능을 사용할 수 있음.
ex. Monster태그가 있다면, 모든 monster태그가 붙어있는 애들을 삭제. 이런식으로.