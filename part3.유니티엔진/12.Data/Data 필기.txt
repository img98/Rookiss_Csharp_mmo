[ Data 매니저 #1 ]
모든 데이터를 해당 스크립트 내에 하드코딩해서 사용한다면,
1. 관리 차원에서의 어려움
2. 실행 파일에 데이터가 묶여있다보니, 수치값만 바꾸면되는 것도 변경해서 재배포하는데 절차가 복잡해짐.

//Data는 항상 들고있어야 하기에 clear하지않는다.

Json과 XML이 자주사용하는 데이터파일 형식이다.
! Json에서 [ ]는 배열리스트를 의미하고, { }는 struct,구조체를 의미한다.

[ Data 매니저 #2 ]
불러온 데이터파일은 사실 텍스트 쪼가리임. 그래서 우리가 쓸수있는 형태로 가공(입력)해줘야됨.
JsonUtility.FromJson<StatData>(textAsset.text); //유니티는 Json을 알아서 파싱해주는 라이브러리가 있다.
//이렇게해주면, json의 struct들을 Statdata형식에다 넣어주는데, statdata의 형식이 위 stat(level,hp,attack)이니 자연스럽게 입력될것이다.
//놀랍게도 이름에 맞춰서 알아서 잘찾아간다한다. 

애초에 형식이 맞지않으면, Init() 하는 순간부터 에러가나서 시스템이 뻗을거다.
StatDict = LoadJson<StatData, int, Stat>("StatData").MakeDict(); 
!LoadJson이 끝나면 StatData타입이 반환될테니, 우리 거기서 추가로 MakeDict()를 진행하여 dictionary를 만들어준다