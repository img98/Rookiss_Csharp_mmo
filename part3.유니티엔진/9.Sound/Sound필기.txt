[ Sound 매니저 #1 ]
SoundManager를 만들면서 유니티에서 제공하는 사운드 기능들을 실습해보자.

근본으로 돌아가서, 사운드라고 하면 머가 필요할까?
1. 출력장치 => AudioSource
2. 음원 => AudioClip
3. 관객(귀) =>AudioListener
위 기능들을 코드로 보기보다는, 툴에서 컴포넌트를 통해 확인해보는게 좀더 파악하기 쉬울거다.

대부분 Listener는 하나만 있으면 되서, MainCamera에 붙어있는경우가 많다.

사용한 메소드
1. PlayOneShot( ) : 클립을 한번 실행시킨다. 그러나
여기서 잠깐 궁금점. 만약 클립이 재생되는 동안에, 스크립트가 달려있는 오브젝트가 삭제(Destroy)되면 어떻게 될까? = 출력장치가 사라진것이기에, 소리가 중간에 끊긴다.
(위처럼 객체에 audioSource를 달면 불안정하다. 그러니 그냥 Source를 매니저에 달아버리면 갑자기 삭제될 일 없이 사용할수있을것이다.)

[ Sound 매니저 #2 ]
만약 실행시키려는 음원이 BGM이려면 컴포넌트의 loop를 켜줘서 무한반복시켜주고, 이펙트같은 단발성 음원이라면 loop를 키지않게 조건을 나눠서 코딩해준다.

그리고 이러한 audio소스를 담을 오브젝트가 필요한데, DontDestroyOnLoad에 @Sound를 만들어주는식으로 하겠다.
(DontDestroyOnLoad는 씬을 이동해도 남아있는 오브젝트다. 그렇기에 편리하지만 메모리 낭비가 될수있어 신중하게 사용해라.)

[ Sound 매니저 #3 ]
Effect클립을 불러오는 과정에서 Resource.Load를 사용하는데, 전에 말했듯 얘는 메모리부하가 좀 있는 편이다.
연타소리마냥 같은 소리를 빠르게 여러번 가져오는 과정에서는 load를 여러번하면 낭비가 될것이다.
=> 이미 가져온애들은 저장해두는 "캐싱"을 연습해보자.
한번 가져온애들은 경로와 클립을 리스트에 담아두었다가, 후에 재호출했을때 리스트에서 바로 꺼내쓰면 Load의 사용빈도가 적어질것이다.

그러나 @Sound는 씬이 넘어가도 삭제 되지않으니, 씬이 넘어가도 위같은 리스트와 아까 불러온 컴포넌트들은 사라지지 않는다.
메모리 낭비되지않게, 다음씬에서 안쓰는건 싹다 날려주도록 clear를 신경써서 만들어주자.

또한 이런 Clear는 씬이 넘어갈때 발생하니, 씬매니저에서 관리해주는게 보통이지만, 혹시 나중에 다른것도 clear 호출해줘야되는 상황이 생길수 있으니
그냥 Managers에서 Clear를 담당하도록 하겠다. ex) 사운드, 인풋, 씬, UI 등등 모든 메모리를 사용하는 오브젝트

[ Sound 매니저 #4 ]
위에서 만든 auidoSource는 종류별로 단 하나만 만들었기에, 멀리있는 소리는 상대적으로 작게 들리는 식의 표현을 할 수 없다.
=> 여러개의 소스를 사용하는 방법을 해보자.
그래서 사실 처음에 했던것처럼, 각 객체에 오디오소스를 붙이는게 맞긴하다.
 위 문제들을 해결하기위해 AudioSource컴포넌트에 있는 3D Sound Settings를 활용해보자.
(사실 어려운건 아니고, 소리가 들리는 범위, 거리와 소리크기의 비례관계등을 설정해주는거다. 간단함)

마치면서 Play()를 경로가 아닌 직접 audioClip을 넣어주는 버전으로 새로만들었고,
기존의 Play안에서 새로운버전의 play를 호출하는 식으로 새롭게 바꿔주었다.

마지막으로 현실적인 게임을 만들고싶어서 AudioListener를 내 캐릭터에다가도 달아주고싶다 쳐보자.
하지만 그러면 메인카메라에1개 캐릭터에1개 해서, 여러개의 Listener가 생기므로, 어느 리스너에 소리를 꼽아줘야될지 혼동이 생겨 오류가 나온다.
