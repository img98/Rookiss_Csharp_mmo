[ Coroutine #1 ]
매우 복잡한 로직을 만든다고치자.연산도 오래걸림. 그걸 코드한번으로 끝내려고한다면, 그걸 1프레임만에 계산을 하라는건데
복잡하다보니 연산에 오래걸릴수도있고, 그러다보면 연산이밀려서 렉이 발생할수있다.
=>그렇게 오래걸리는 로직이라면, 여러프레임에 분할시켜서 연산시키면 좋겠다.
ex) 기능A를 10만번 수행해야된다면, 한프레임당 1만번씩만 돌려서 10프레임동안 수행하게 하는거다.

!함수를 일시적으로 정지시켰다가, 나중에 값들을 그대로 가진상태로 다시 재생시킬수있다는게 Coroutine의 개념임!

Coroutine은 yield return을 통해 여러번 return을 할 수 있었고, yield return null;을 통해 한틱 쉬기도 가능하다.
그렇다면 진짜로 멈추고 싶을때(종료)는 어떻게 해야될까? => yield break

[ Coroutine #2 ]
Coroutine의 특성
1. 함수의 상태를 저장/복원 가능하다
=>엄청 오래걸리는 작업을 잠시 끊거나,
=>원하는 타이밍에 함수를 잠시 Stop/복원 하고싶은 경우에 유용하다.
2. return할때는 우리가 원하는 타입으로 가능하다.(IEnumerable이 Object타입이라서) (class타입도 리턴 가능하다.)

! IEnumerator 함수A( ){}로 코루틴함수를 만들수 있고, StartCoroutine("함수A",인자)로 코루틴을 실행시킬수 있다.
특이하게 함수이름을 string으로 입력하네.

!!여기서 yield return new WaitForSeconds()를 사용하면 시간관리하는데도 아주 유용하다.
(deltaTime을 이용하면, 만약 캐릭터가 몇천마리가 된다쳤을때, 간단한 덧셈연산이지만 이게 몇천개가 되니까 비효율적임)
이게 코루틴을 배운핵심이라 할수있다. 시간관리에 너무나 효과적임!!